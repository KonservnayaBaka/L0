// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	models "wbL0/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// OrderServiceInterface is an autogenerated mock type for the OrderServiceInterface type
type OrderServiceInterface struct {
	mock.Mock
}

// GetOrder provides a mock function with given fields: ctx, orderUID
func (_m *OrderServiceInterface) GetOrder(ctx context.Context, orderUID string) (*models.FullOrder, error) {
	ret := _m.Called(ctx, orderUID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 *models.FullOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.FullOrder, error)); ok {
		return rf(ctx, orderUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.FullOrder); ok {
		r0 = rf(ctx, orderUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FullOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessAndCache provides a mock function with given fields: ctx, fo
func (_m *OrderServiceInterface) ProcessAndCache(ctx context.Context, fo *models.FullOrder) error {
	ret := _m.Called(ctx, fo)

	if len(ret) == 0 {
		panic("no return value specified for ProcessAndCache")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.FullOrder) error); ok {
		r0 = rf(ctx, fo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RestoreCacheFromDB provides a mock function with given fields: ctx
func (_m *OrderServiceInterface) RestoreCacheFromDB(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RestoreCacheFromDB")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrderServiceInterface creates a new instance of OrderServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderServiceInterface {
	mock := &OrderServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
