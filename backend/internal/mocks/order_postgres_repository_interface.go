// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	models "wbL0/internal/models"

	mock "github.com/stretchr/testify/mock"

	orderRepoPostgres "wbL0/internal/repository/postgres/orderRepoPostgres"
)

// OrderPostgresRepositoryInterface is an autogenerated mock type for the OrderPostgresRepositoryInterface type
type OrderPostgresRepositoryInterface struct {
	mock.Mock
}

// BeginTx provides a mock function with given fields: ctx
func (_m *OrderPostgresRepositoryInterface) BeginTx(ctx context.Context) (orderRepoPostgres.PgxTx, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 orderRepoPostgres.PgxTx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (orderRepoPostgres.PgxTx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) orderRepoPostgres.PgxTx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orderRepoPostgres.PgxTx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllFullOrders provides a mock function with given fields: ctx
func (_m *OrderPostgresRepositoryInterface) GetAllFullOrders(ctx context.Context) ([]*models.FullOrder, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFullOrders")
	}

	var r0 []*models.FullOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.FullOrder, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.FullOrder); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.FullOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFullOrderByUID provides a mock function with given fields: ctx, orderUID
func (_m *OrderPostgresRepositoryInterface) GetFullOrderByUID(ctx context.Context, orderUID string) (*models.FullOrder, error) {
	ret := _m.Called(ctx, orderUID)

	if len(ret) == 0 {
		panic("no return value specified for GetFullOrderByUID")
	}

	var r0 *models.FullOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.FullOrder, error)); ok {
		return rf(ctx, orderUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.FullOrder); ok {
		r0 = rf(ctx, orderUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FullOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderInfoByUid provides a mock function with given fields: ctx, orderUID
func (_m *OrderPostgresRepositoryInterface) GetOrderInfoByUid(ctx context.Context, orderUID string) (*models.Order, error) {
	ret := _m.Called(ctx, orderUID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderInfoByUid")
	}

	var r0 *models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Order, error)); ok {
		return rf(ctx, orderUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Order); ok {
		r0 = rf(ctx, orderUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveDeliveryDataTx provides a mock function with given fields: ctx, tx, delivery
func (_m *OrderPostgresRepositoryInterface) SaveDeliveryDataTx(ctx context.Context, tx orderRepoPostgres.PgxTx, delivery *models.Delivery) error {
	ret := _m.Called(ctx, tx, delivery)

	if len(ret) == 0 {
		panic("no return value specified for SaveDeliveryDataTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, orderRepoPostgres.PgxTx, *models.Delivery) error); ok {
		r0 = rf(ctx, tx, delivery)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveItemsDataTx provides a mock function with given fields: ctx, tx, item
func (_m *OrderPostgresRepositoryInterface) SaveItemsDataTx(ctx context.Context, tx orderRepoPostgres.PgxTx, item *models.Item) error {
	ret := _m.Called(ctx, tx, item)

	if len(ret) == 0 {
		panic("no return value specified for SaveItemsDataTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, orderRepoPostgres.PgxTx, *models.Item) error); ok {
		r0 = rf(ctx, tx, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveOrderDataTx provides a mock function with given fields: ctx, tx, order
func (_m *OrderPostgresRepositoryInterface) SaveOrderDataTx(ctx context.Context, tx orderRepoPostgres.PgxTx, order *models.Order) error {
	ret := _m.Called(ctx, tx, order)

	if len(ret) == 0 {
		panic("no return value specified for SaveOrderDataTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, orderRepoPostgres.PgxTx, *models.Order) error); ok {
		r0 = rf(ctx, tx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SavePaymentDataTx provides a mock function with given fields: ctx, tx, payment
func (_m *OrderPostgresRepositoryInterface) SavePaymentDataTx(ctx context.Context, tx orderRepoPostgres.PgxTx, payment *models.Payment) error {
	ret := _m.Called(ctx, tx, payment)

	if len(ret) == 0 {
		panic("no return value specified for SavePaymentDataTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, orderRepoPostgres.PgxTx, *models.Payment) error); ok {
		r0 = rf(ctx, tx, payment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrderPostgresRepositoryInterface creates a new instance of OrderPostgresRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderPostgresRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderPostgresRepositoryInterface {
	mock := &OrderPostgresRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
